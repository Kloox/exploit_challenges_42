Fun fact in the program bomb of the user laurie.
We found that there is a secret stage.

Do exactly as before for the 3rd first phases.
When we get to phase 4. Instead of giving 9 as the answer let's give :
"9 austinpowers"

In the function phase_defused(), 
we find that it put as parameter in the func strings_not_equal() the string "austinpowers"

(gdb) disas phase_defused
Dump of assembler code for function phase_defused:
[...]
   0x0804955e <+50>:	push   $0x8049d09
   0x08049563 <+55>:	push   %ebx
   0x08049564 <+56>:	call   0x8049030 <strings_not_equal>
[...]

(gdb) x/s 0x8049d09
0x8049d09:	"austinpowers"

At the end after solving the phase 6, it will display the following message :

"Curses, you've found the secret phase!"
"But finding it and solving it are quite different..."

First it checks if the number is >= 1002. If it's the case it blows the bomb up.
Then it calls the function fun7() with our entry as parameter with a hard value.
Then it compares the result with 7. If it's equal it validate the secret stage.
Here throwing all value in descending order and cheking the register we quickly find that "1001" is the good answer :)

"Wow! You've defused the secret stage!"
"Congratulations! You've defused the bomb!"
